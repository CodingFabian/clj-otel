# OpenTelemetry Collector configuration.
# Note the 'service' configuration determines which 'receivers', 'processors',
# 'exporters' and 'extensions' components are enabled.

# Telemetry data receivers components
receivers:

  # Receives data in OpenTelemetry Protocol format
  otlp:
    protocols:

      # Enable HTTP receiver
      http:



# Telemetry data processors components
processors:

  # Help avoid out-of-memory errors during high load
  memory_limiter:
    check_interval: 1s
    limit_mib: 50

  # Places received data in batches prior to export
  batch:



# Telemetry data exporters components
exporters:

  # Logs brief summary of telemetry data to console
  debug:

  # Exports to Tempo using OTLP over gRPC
  otlp/tempo:
    endpoint: "tempo:4317"
    tls:
      insecure: true

  # Exports to Prometheus
  prometheusremotewrite:
    endpoint: "http://prometheus:9090/api/v1/write"
    tls:
      insecure: true



# Collector extensions components
extensions:

  # Responds to health check requests
  health_check:



# Enable receivers, processors, exporters and extensions components
service:

  # Enable extensions components
  extensions: [ health_check ]

  # Enable pipelines of components for telemetry data
  pipelines:

    # Enable pipeline of components for traces
    traces:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ debug, otlp/tempo ]

    # Enable pipeline of components for metrics
    metrics:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ debug, prometheusremotewrite ]
